import asyncio
from typing import Any, Awaitable, Callable, Dict, List, Union

from aiogram import BaseMiddleware, Bot, Dispatcher, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, CommandObject

from aiogram.types import (
    InputMediaAudio,
    InputMediaDocument,
    InputMediaPhoto,
    InputMediaVideo,
    Message,
    TelegramObject,
)
from conf import API_KEY, CHANNEL

DEFAULT_DELAY = 0.6
CHAT_ID_TO_SEND = CHANNEL

bot = Bot(API_KEY, parse_mode="HTML")
dp = Dispatcher()


class MediaGroupMiddleware(BaseMiddleware):
    ALBUM_DATA: Dict[str, List[Message]] = {}

    def __init__(self, delay: Union[int, float] = DEFAULT_DELAY):
        self.delay = delay

    async def __call__(
            self,
            handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
            event: Message,
            data: Dict[str, Any],
    ) -> Any:
        if not event.media_group_id:
            return await handler(event, data)

        try:
            self.ALBUM_DATA[event.media_group_id].append(event)
            return  # Don't propagate the event
        except KeyError:
            self.ALBUM_DATA[event.media_group_id] = [event]
            await asyncio.sleep(self.delay)
            data["album"] = self.ALBUM_DATA.pop(event.media_group_id)

        return await handler(event, data)


@dp.message(F.photo & F.from_user.id == 460956316)
async def get_img(message: Message):
    await message.answer(message.photo[0].file_id)


@dp.message(F.reply_to_message & ~F.chat.type.in_({"private"}))
async def from_chat_to_user(message: Message):
    if message.reply_to_message:
        if message.reply_to_message.forward_from is not None:
            to_user = message.reply_to_message.forward_from.id
        elif message.reply_to_message.text and '|' in message.reply_to_message.text:
            to_user = message.reply_to_message.text.split('|')[1].strip()
        else:
            return await message.answer('–ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –õ–∏–±–æ –æ–Ω —Å–∫—Ä—ã—Ç,'
                                        ' –ª–∏–±–æ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ –Ω–∞ —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        if message.text in ['—è', '–Ø']:
            await message.delete()
            await bot.send_message(
                to_user,
                f'–í–∞—à–µ —Ç–∑ –ø—Ä–∏–Ω—è–ª –≤ —Ä–∞–±–æ—Ç—É @{message.from_user.username}'
            )
        else:
            await bot.send_message(
                to_user,
                message.text
            )


@dp.message(Command(commands=['mailing']))
async def mass_mailing(message: Message, command: CommandObject):
    mailing_msg = command.args
    print(message.photo)
    with open('users.txt', 'r') as file:
        count = 0
        for user in file:
            user = user.split('|')
            if len(user) < 2:
                continue
            try:
                if message.photo:
                    await bot.send_photo(user[0], message.photo[-1].file_id)
                if mailing_msg:
                    await bot.send_message(user[0].strip(), mailing_msg)
                count += 1
            except TelegramBadRequest:
                continue
        return await message.answer('–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ ' + str(count) + ' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')


@dp.message(Command(commands=['users']))
async def mass_mailing(message: Message):
    with open('users.txt', 'r') as file:
        users = file.readlines()
        msg = ''
        if len(users) < 1:
            return await message.answer('–ö–∞–∂–µ—Ç—Å—è, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç')
        for user in users:
            msg += user.split('|')[0] + ' - ' + f'<a href="t.me/{user.split("|")[1]}">{user.split("|")[1]}</a>'
        return await message.answer(msg, disable_web_page_preview=True)


@dp.message(Command(commands=['del']))
async def mass_mailing(message: Message, command: CommandObject):
    user_to_delete = command.args
    find = False
    with open('users.txt', 'r') as file:
        users = file.readlines()
    with open('users.txt', 'w') as file:
        for user in users:
            user_id = user.split('|')[0].strip()
            if user_to_delete == user_id:
                find = user
                continue
            file.write(user)
    if find:
        return await message.answer(f'–£–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <a href="t.me/{find.split("|")[1]}">@{find.split("|")[1]}</a>')
    else:
        return await message.answer('–ù–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')


@dp.message(Command(commands=['start']))
async def cmd_start(message: Message):
    find = False
    with open('users.txt', 'r+') as file:
        users = file.readlines()
        for user in users:
            user_id = user.split('|')
            if len(user_id) < 2:
                continue
            if str(user_id[0].strip()) == str(message.from_user.id):
                find = True
                break
    if not find:
        with open('users.txt', 'a') as file:
            await bot.send_message(
                CHAT_ID_TO_SEND,
                f'<a href="t.me/{message.from_user.username}">{message.from_user.username}</a> –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É',
                disable_web_page_preview=True
            )
            file.write(str(message.from_user.id) + '|' + message.from_user.username + '\n')

    pin = await message.answer_photo(
        photo='AgACAgIAAxkBAAJEQGWc8iKWwxhhKTl1j7t63EZO2ShlAAIw2TEbxFjoSPy-qJX6WgbeAQADAgADcwADNAQ',
        caption='‚ÄºÔ∏è–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—é–¥–∞ —Å–≤–æ–µ —Ç–∑ –≤ —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: \n\n'
                '<b>–ñ–µ–ª–∞–µ–º—ã–π –î–∏–∑–∞–π–Ω–µ—Ä (–∏–ª–∏ -): \n'
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–æ: \n'
                '–§–æ—Ä–º–∞—Ç (–§–æ—Ç–æ/–í–∏–¥–µ–æ/–î—Ä—É–≥–æ–µ):  \n'
                'üî∫–í–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò: (–ú–∞–∫—Å–∏–º—É–º 2 –≤–∏–¥–µ–æ –≤ –¥–µ–Ω—å –æ—Ç –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞) \n'
                '–ì–µ–æ, —è–∑—ã–∫: \n'
                '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:  \n'
                '–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (–¥–∞/–Ω–µ—Ç): \n'
                '–í–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä—ã, –±–∞–Ω–∫–∞): \n'
                '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: </b>\n\n'
                '–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –±–∞–Ω–∫—É –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>(.png)</b> –±–µ–∑ —Å–∂–∞—Ç–∏—è, '
                '–µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ —Ç–æ —É–∫–∞–∑–∞—Ç—å "–ë–µ–∑ –±–∞–Ω–∫–∏" \n'
                '–ü–æ –∂–µ–ª–∞–Ω–∏—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –ø—Ä–∏–ª–∞–≥–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–¥—Ö–µ—Ä—Ç, –ø—Ä–æ–∫–ª—É, –ü–ü \n\n'
                'üî∫–î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ <b>—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò</b>(—Å–∏–Ω—Ö—Ä–æ–Ω –≥—É–±) –≤–∞–∂–Ω–æ —á—Ç–æ–±—ã —É —Å–µ–ª–µ–±—ã –±—ã–ª–∏ —Ö–æ—Ä–æ—à–µ–≥–æ '
                '–∫–∞—á–µ—Å—Ç–≤–∞ –∏—Å—Ö–æ–¥–Ω–∏–∫–∏: ‚ÄºÔ∏è<b>—á–µ–º –¥–∞–ª—å—à–µ —Å–µ–ª–µ–±–∞ –æ—Ç –∫–∞–¥—Ä–∞,—Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç,–Ω–æ –µ—Å–ª–∏ —Å–µ–ª–µ–±–∞ –±–ª–∏–∑–∫–æ –∏–ª–∏ '
                '–æ—á–µ–Ω—å '
                '—Å–∏–ª—å–Ω–æ –º–æ—Ç–∞–µ—Ç –≥–æ–ª–æ–≤–æ–π, —Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç —Ö—É–∂–µ</b>‚ÄºÔ∏è')
    await bot.unpin_all_chat_messages(chat_id=message.chat.id)
    await bot.pin_chat_message(chat_id=message.chat.id, message_id=pin.message_id)
    return True


@dp.message(F.media_group_id)
async def handle_albums(message: Message, album: List[Message]):
    """This handler will receive a complete album of any type."""
    group_elements = []
    for element in album:
        print(element.caption)
        caption_kwargs = {"caption": element.caption, "caption_entities": element.caption_entities}
        if element.photo:
            input_media = InputMediaPhoto(media=element.photo[-1].file_id, **caption_kwargs, parse_mode=None)
        elif element.video:
            input_media = InputMediaVideo(media=element.video.file_id, **caption_kwargs, parse_mode=None)
        elif element.document:
            input_media = InputMediaDocument(media=element.document.file_id, **caption_kwargs, parse_mode=None)
        elif element.audio:
            input_media = InputMediaAudio(media=element.audio.file_id, **caption_kwargs)
        else:
            return message.answer("This media type isn't supported!")

        group_elements.append(input_media)
    username = message.from_user.username if message.from_user.username else 'unknown'
    await message.reply('–û—Ç–ø—Ä–∞–≤–∏–ª, –æ–∂–∏–¥–∞–π—Ç–µ')
    await bot.send_message(
        CHAT_ID_TO_SEND,
        text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username} ({message.from_user.full_name}) | {message.from_user.id}', parse_mode=None)
    return await bot.send_media_group(CHAT_ID_TO_SEND, media=group_elements)


@dp.message(F.chat.type.in_({"private"}), ~F.content_type.in_({'pinned_message'}))
async def handle_text(message: Message):
    await message.reply('–û—Ç–ø—Ä–∞–≤–∏–ª, –æ–∂–∏–¥–∞–π—Ç–µ')
    return await message.forward(CHAT_ID_TO_SEND)


if __name__ == "__main__":
    dp.message.middleware(MediaGroupMiddleware())
    dp.run_polling(bot, allowed_updates=dp.resolve_used_update_types(), skip_updates=True)
